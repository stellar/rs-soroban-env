name: Rust

on:
  push:
    branches: [main, release/**]
  pull_request:
  merge_group:

jobs:

  complete:
    if: always()
    needs: [fmt, cargo-deny, check-git-rev-deps, rust-analyzer-compat, build-and-test, publish-dry-run]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  cackle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cackle-rs/cackle-action@387fe459d8c037a0e7fbcd3d868f1aaba389d057
      - run: cargo acl -n run

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@e0a440755b184aa50374330fa75cca0f84fcb59a
      with:
        command: check ${{ matrix.checks }}

  check-git-rev-deps:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-check-git-rev-deps@main

  rust-analyzer-compat:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: rustup component add rust-analyzer
    - name: Check if rust-analyzer encounters any errors parsing project
      run: rust-analyzer analysis-stats . 2>&1 | (! grep ERROR)

  build-and-test:
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
          test: false
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          test: true
        # TODO: Re-enable these builds if we see value in doing so.
        # - os: macos-latest
        #   target: x86_64-apple-darwin
        #   test: true
        # - os: macos-latest
        #   target: aarch64-apple-darwin
        #   test: false
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
        #   test: true
    runs-on: ${{ matrix.sys.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup update
    - run: rustup target add ${{ matrix.sys.target }}
    - uses: stellar/binaries@v12
      with:
        name: cargo-hack
        version: 0.5.16
    - run: cargo hack --each-feature clippy --locked --target ${{ matrix.sys.target }}
    - if: matrix.sys.test
      run: cargo hack --each-feature test --profile test-opt --locked --target ${{ matrix.sys.target }}

  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
    uses: stellar/actions/.github/workflows/rust-publish-dry-run.yml@main
    with:
      runs-on: ${{ matrix.sys.os }}
      target: ${{ matrix.sys.target }}
