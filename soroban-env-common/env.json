{
    "modules": [
        {
            "name": "context",
            "export": "x",
            "functions": [
                {
                    "export": "_",
                    "name": "log_value",
                    "args": [
                        {
                            "name": "v",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "This one variant of logging does not take a format string and is live in both Env=Guest and Env=Host configurations."
                },
                {
                    "export": "0",
                    "name": "get_invoking_contract",
                    "args": [],
                    "return": "Object",
                    "docs": "Get the contractID `Bytes` of the contract which invoked the running contract. Traps if the running contract was not invoked by a contract."
                },
                {
                    "export": "1",
                    "name": "obj_cmp",
                    "args": [
                        {
                            "name": "a",
                            "type": "RawVal"
                        },
                        {
                            "name": "b",
                            "type": "RawVal"
                        }
                    ],
                    "return": "i64",
                    "docs": ""
                },
                {
                    "export": "2",
                    "name": "contract_event",
                    "args": [
                        {
                            "name": "topics",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Records a contract event. `topics` is expected to be a `SCVec` with length <= 4 that cannot contain `Vec`, `Map`, or `Bytes` with length > 32 On success, returns an `SCStatus::Ok`."
                },
                {
                    "export": "3",
                    "name": "get_current_contract",
                    "args": [],
                    "return": "Object",
                    "docs": "Get the contractID `Bytes` of the contract which invoked the running contract. Traps if the running contract was not invoked by a contract."
                },
                {
                    "export": "4",
                    "name": "get_ledger_version",
                    "args": [],
                    "return": "RawVal",
                    "docs": "Return the protocol version of the current ledger as a u32."
                },
                {
                    "export": "5",
                    "name": "get_ledger_sequence",
                    "args": [],
                    "return": "RawVal",
                    "docs": "Return the sequence number of the current ledger as a u32."
                },
                {
                    "export": "6",
                    "name": "get_ledger_timestamp",
                    "args": [],
                    "return": "Object",
                    "docs": "Return the timestamp number of the current ledger as a u64."
                },
                {
                    "export": "7",
                    "name": "get_ledger_network_passphrase",
                    "args": [],
                    "return": "Object",
                    "docs": "Return the network passphrase of the current ledger as `Bytes`."
                },
                {
                    "export": "8",
                    "name": "get_current_call_stack",
                    "args": [],
                    "return": "Object",
                    "docs": "Returns the full call stack from the first contract call to the current one as a vector of vectors, where the inside vector contains the contract id as Hash, and a function as a Symbol."
                },
                {
                    "export": "9",
                    "name": "fail_with_status",
                    "args": [
                        {
                            "name": "status",
                            "type": "Status"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Causes the currently executing contract to fail immediately with a provided status code, which must be of error-type `ScStatusType::ContractError`. Does not actually return."
                },
                {
                    "export": "a",
                    "name": "log_fmt_values",
                    "args": [
                        {
                            "name": "fmt",
                            "type": "Object"
                        },
                        {
                            "name": "args",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Record a debug event. Fmt must be a Bytes. Args must be a Vec. Void is returned."
                },
                {
                    "export": "b",
                    "name": "get_invoker_type",
                    "args": [],
                    "return": "u64",
                    "docs": "Get whether the contract invocation is from an account or another contract. Returns 0 for account, 1 for contract."
                },
                {
                    "export": "c",
                    "name": "get_invoking_account",
                    "args": [],
                    "return": "Object",
                    "docs": "Get the AccountID object type of the account which invoked the running contract. Traps if the running contract was not invoked by an account."
                },
                {
                    "export": "d",
                    "name": "get_ledger_network_id",
                    "args": [],
                    "return": "Object",
                    "docs": "Return the network id (sha256 hash of network passphrase) of the current ledger as `Bytes`. The value is always 32 bytes in length."
                }
            ]
        },
        {
            "name": "i64",
            "export": "i",
            "functions": [
                {
                    "export": "_",
                    "name": "obj_from_u64",
                    "args": [
                        {
                            "name": "v",
                            "type": "u64"
                        }
                    ],
                    "return": "Object",
                    "docs": "Convert a u64 to an object containing a u64."
                },
                {
                    "export": "0",
                    "name": "obj_to_u64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "u64",
                    "docs": "Convert an object containing a i64 to a u64."
                },
                {
                    "export": "1",
                    "name": "obj_from_i64",
                    "args": [
                        {
                            "name": "v",
                            "type": "i64"
                        }
                    ],
                    "return": "Object",
                    "docs": "Convert an i64 to an object containing an i64."
                },
                {
                    "export": "2",
                    "name": "obj_to_i64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "i64",
                    "docs": "Convert an object containing an i64 to an i64."
                },
                {
                    "export": "5",
                    "name": "obj_from_u128_pieces",
                    "args": [
                        {
                            "name": "lo",
                            "type": "u64"
                        },
                        {
                            "name": "hi",
                            "type": "u64"
                        }
                    ],
                    "return": "Object",
                    "docs": "Convert the low and high 64-bit words of a u128 to an object containing a u128."
                },
                {
                    "export": "6",
                    "name": "obj_to_u128_lo64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "u64",
                    "docs": "Extract the low 64 bits from an object containing a u128."
                },
                {
                    "export": "7",
                    "name": "obj_to_u128_hi64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "u64",
                    "docs": "Extract the high 64 bits from an object containing a u128."
                },
                {
                    "export": "8",
                    "name": "obj_from_i128_pieces",
                    "args": [
                        {
                            "name": "lo",
                            "type": "u64"
                        },
                        {
                            "name": "hi",
                            "type": "u64"
                        }
                    ],
                    "return": "Object",
                    "docs": "Convert the lo and hi 64-bit words of an i128 to an object containing an i128."
                },
                {
                    "export": "9",
                    "name": "obj_to_i128_lo64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "u64",
                    "docs": "Extract the low 64 bits from an object containing an i128."
                },
                {
                    "export": "a",
                    "name": "obj_to_i128_hi64",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object"
                        }
                    ],
                    "return": "u64",
                    "docs": "Extract the high 64 bits from an object containing an i128."
                }
            ]
        },
        {
            "name": "map",
            "export": "m",
            "functions": [
                {
                    "export": "_",
                    "name": "map_new",
                    "args": [],
                    "return": "Object",
                    "docs": "Create an empty new map."
                },
                {
                    "export": "0",
                    "name": "map_put",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        },
                        {
                            "name": "v",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Insert a key/value mapping into an existing map, and return the map object handle. If the map already has a mapping for the given key, the previous value is overwritten."
                },
                {
                    "export": "1",
                    "name": "map_get",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the value for a key from a map. Traps if key is not found."
                },
                {
                    "export": "2",
                    "name": "map_del",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Remove a key/value mapping from a map if it exists, traps if doesn't."
                },
                {
                    "export": "3",
                    "name": "map_len",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the size of a map."
                },
                {
                    "export": "4",
                    "name": "map_has",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Test for the presence of a key in a map. Returns (SCStatic) TRUE/FALSE."
                },
                {
                    "export": "5",
                    "name": "map_prev_key",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Given a key, find the first key less than itself in the map's sorted order. If such a key does not exist, return an SCStatus containing the error code (TBD)."
                },
                {
                    "export": "6",
                    "name": "map_next_key",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Given a key, find the first key greater than itself in the map's sorted order. If such a key does not exist, return an SCStatus containing the error code (TBD)."
                },
                {
                    "export": "7",
                    "name": "map_min_key",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Find the minimum key from a map. If the map is empty, return an SCStatus containing the error code (TBD)."
                },
                {
                    "export": "8",
                    "name": "map_max_key",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Find the maximum key from a map. If the map is empty, return an SCStatus containing the error code (TBD)."
                },
                {
                    "export": "9",
                    "name": "map_keys",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Return a new vector containing all the keys in a map. The new vector is ordered in the original map's key-sorted order."
                },
                {
                    "export": "A",
                    "name": "map_values",
                    "args": [
                        {
                            "name": "m",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Return a new vector containing all the values in a map. The new vector is ordered in the original map's key-sorted order."
                }
            ]
        },
        {
            "name": "vec",
            "export": "v",
            "functions": [
                {
                    "export": "_",
                    "name": "vec_new",
                    "args": [
                        {
                            "name": "c",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Creates a new vector with an optional capacity hint `c`. If `c` is `ScStatic::Void`, no hint is assumed and the new vector is empty. Otherwise, `c` is parsed as an `u32` that represents the initial capacity of the new vector."
                },
                {
                    "export": "0",
                    "name": "vec_put",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Update the value at index `i` in the vector. Return the new vector. Trap if the index is out of bounds."
                },
                {
                    "export": "1",
                    "name": "vec_get",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Returns the element at index `i` of the vector. Traps if the index is out of bound."
                },
                {
                    "export": "2",
                    "name": "vec_del",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Delete an element in a vector at index `i`, shifting all elements after it to the left. Return the new vector. Traps if the index is out of bound."
                },
                {
                    "export": "3",
                    "name": "vec_len",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Returns length of the vector."
                },
                {
                    "export": "4",
                    "name": "vec_push_front",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Push a value to the front of a vector."
                },
                {
                    "export": "5",
                    "name": "vec_pop_front",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Removes the first element from the vector and returns the new vector. Traps if original vector is empty."
                },
                {
                    "export": "6",
                    "name": "vec_push_back",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Appends an element to the back of the vector."
                },
                {
                    "export": "7",
                    "name": "vec_pop_back",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Removes the last element from the vector and returns the new vector. Traps if original vector is empty."
                },
                {
                    "export": "8",
                    "name": "vec_front",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Return the first element in the vector. Traps if the vector is empty"
                },
                {
                    "export": "9",
                    "name": "vec_back",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Return the last element in the vector. Traps if the vector is empty"
                },
                {
                    "export": "A",
                    "name": "vec_insert",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Inserts an element at index `i` within the vector, shifting all elements after it to the right. Traps if the index is out of bound"
                },
                {
                    "export": "B",
                    "name": "vec_append",
                    "args": [
                        {
                            "name": "v1",
                            "type": "Object"
                        },
                        {
                            "name": "v2",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Clone the vector `v1`, then moves all the elements of vector `v2` into it. Return the new vector. Traps if number of elements in the vector overflows a u32."
                },
                {
                    "export": "C",
                    "name": "vec_slice",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "start",
                            "type": "RawVal"
                        },
                        {
                            "name": "end",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Copy the elements from `start` index until `end` index, exclusive, in the vector and create a new vector from it. Return the new vector. Traps if the index is out of bound."
                },
                {
                    "export": "D",
                    "name": "vec_first_index_of",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the index of the first occurrence of a given element in the vector. Returns the u32 index of the value if it's there. Otherwise, it returns `ScStatic::Void`."
                },
                {
                    "export": "E",
                    "name": "vec_last_index_of",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the index of the last occurrence of a given element in the vector. Returns the u32 index of the value if it's there. Otherwise, it returns `ScStatic::Void`."
                },
                {
                    "export": "F",
                    "name": "vec_binary_search",
                    "args": [
                        {
                            "name": "v",
                            "type": "Object"
                        },
                        {
                            "name": "x",
                            "type": "RawVal"
                        }
                    ],
                    "return": "u64",
                    "docs": "Binary search a sorted vector for a given element. If it exists, the high-32 bits of the return value is 0x0001 and the low-32 bits contain the u32 index of the element. If it does not exist, the high-32 bits of the return value is 0x0000 and the low-32 bits contain the u32 index at which the element would need to be inserted into the vector to maintain sorted order."
                }
            ]
        },
        {
            "name": "ledger",
            "export": "l",
            "functions": [
                {
                    "export": "_",
                    "name": "put_contract_data",
                    "args": [
                        {
                            "name": "k",
                            "type": "RawVal"
                        },
                        {
                            "name": "v",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal"
                },
                {
                    "export": "0",
                    "name": "has_contract_data",
                    "args": [
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal"
                },
                {
                    "export": "1",
                    "name": "get_contract_data",
                    "args": [
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal"
                },
                {
                    "export": "2",
                    "name": "del_contract_data",
                    "args": [
                        {
                            "name": "k",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal"
                },
                {
                    "export": "3",
                    "name": "create_contract_from_contract",
                    "args": [
                        {
                            "name": "wasm_hash",
                            "type": "Object"
                        },
                        {
                            "name": "salt",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Deploys a contract from the current contract. `wasm_hash` must be a hash of the contract code that has already been installed on this network. `salt` is used to create a unique contract id."
                },
                {
                    "export": "4",
                    "name": "create_token_from_contract",
                    "args": [
                        {
                            "name": "salt",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Deploys a built-in token contract from the current contract. `salt` is used to create a unique contract id for the token."
                }
            ]
        },
        {
            "name": "call",
            "export": "d",
            "functions": [
                {
                    "export": "_",
                    "name": "call",
                    "args": [
                        {
                            "name": "contract",
                            "type": "Object"
                        },
                        {
                            "name": "func",
                            "type": "Symbol"
                        },
                        {
                            "name": "args",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Calls a function in another contract with arguments contained in vector `args`. If the call is successful, forwards the result of the called function. Traps otherwise."
                },
                {
                    "export": "0",
                    "name": "try_call",
                    "args": [
                        {
                            "name": "contract",
                            "type": "Object"
                        },
                        {
                            "name": "func",
                            "type": "Symbol"
                        },
                        {
                            "name": "args",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Calls a function in another contract with arguments contained in vector `args`. Returns: - if successful, result of the called function. - otherwise, an `SCStatus` containing the error status code."
                }
            ]
        },
        {
            "name": "bytes",
            "export": "b",
            "functions": [
                {
                    "export": "_",
                    "name": "serialize_to_bytes",
                    "args": [
                        {
                            "name": "v",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Serializes an (SC)Val into XDR opaque `Bytes` object."
                },
                {
                    "export": "0",
                    "name": "deserialize_from_bytes",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Deserialize a `Bytes` object to get back the (SC)Val."
                },
                {
                    "export": "1",
                    "name": "bytes_copy_to_linear_memory",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "b_pos",
                            "type": "RawVal"
                        },
                        {
                            "name": "lm_pos",
                            "type": "RawVal"
                        },
                        {
                            "name": "len",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Copies a slice of bytes from a `Bytes` object specified at offset `b_pos` with length `len` into the linear memory at position `lm_pos`. Traps if either the `Bytes` object or the linear memory doesn't have enough bytes."
                },
                {
                    "export": "2",
                    "name": "bytes_copy_from_linear_memory",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "b_pos",
                            "type": "RawVal"
                        },
                        {
                            "name": "lm_pos",
                            "type": "RawVal"
                        },
                        {
                            "name": "len",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Copies a segment of the linear memory specified at position `lm_pos` with length `len`, into a `Bytes` object at offset `b_pos`. The `Bytes` object may grow in size to accommodate the new bytes. Traps if the linear memory doesn't have enough bytes."
                },
                {
                    "export": "3",
                    "name": "bytes_new_from_linear_memory",
                    "args": [
                        {
                            "name": "lm_pos",
                            "type": "RawVal"
                        },
                        {
                            "name": "len",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Constructs a new `Bytes` object initialized with bytes copied from a linear memory slice specified at position `lm_pos` with length `len`."
                },
                {
                    "export": "4",
                    "name": "bytes_new",
                    "args": [],
                    "return": "Object",
                    "docs": "Create an empty new `Bytes` object."
                },
                {
                    "export": "5",
                    "name": "bytes_put",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        },
                        {
                            "name": "u",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Update the value at index `i` in the `Bytes` object. Return the new `Bytes`. Trap if the index is out of bounds."
                },
                {
                    "export": "6",
                    "name": "bytes_get",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Returns the element at index `i` of the `Bytes` object. Traps if the index is out of bound."
                },
                {
                    "export": "7",
                    "name": "bytes_del",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Delete an element in a `Bytes` object at index `i`, shifting all elements after it to the left. Return the new `Bytes`. Traps if the index is out of bound."
                },
                {
                    "export": "8",
                    "name": "bytes_len",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Returns length of the `Bytes` object."
                },
                {
                    "export": "9",
                    "name": "bytes_push",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "u",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Appends an element to the back of the `Bytes` object."
                },
                {
                    "export": "A",
                    "name": "bytes_pop",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Removes the last element from the `Bytes` object and returns the new `Bytes`. Traps if original `Bytes` is empty."
                },
                {
                    "export": "B",
                    "name": "bytes_front",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Return the first element in the `Bytes` object. Traps if the `Bytes` is empty"
                },
                {
                    "export": "C",
                    "name": "bytes_back",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Return the last element in the `Bytes` object. Traps if the `Bytes` is empty"
                },
                {
                    "export": "D",
                    "name": "bytes_insert",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "i",
                            "type": "RawVal"
                        },
                        {
                            "name": "u",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Inserts an element at index `i` within the `Bytes` object, shifting all elements after it to the right. Traps if the index is out of bound"
                },
                {
                    "export": "E",
                    "name": "bytes_append",
                    "args": [
                        {
                            "name": "b1",
                            "type": "Object"
                        },
                        {
                            "name": "b2",
                            "type": "Object"
                        }
                    ],
                    "return": "Object",
                    "docs": "Clone the `Bytes` object `b1`, then moves all the elements of `Bytes` object `b2` into it. Return the new `Bytes`. Traps if its length overflows a u32."
                },
                {
                    "export": "F",
                    "name": "bytes_slice",
                    "args": [
                        {
                            "name": "b",
                            "type": "Object"
                        },
                        {
                            "name": "start",
                            "type": "RawVal"
                        },
                        {
                            "name": "end",
                            "type": "RawVal"
                        }
                    ],
                    "return": "Object",
                    "docs": "Copies the elements from `start` index until `end` index, exclusive, in the `Bytes` object and creates a new `Bytes` from it. Returns the new `Bytes`. Traps if the index is out of bound."
                }
            ]
        },
        {
            "name": "hash",
            "export": "h",
            "functions": [
                {
                    "export": "_",
                    "name": "hash_from_bytes",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        }
                    ],
                    "return": "Object"
                },
                {
                    "export": "0",
                    "name": "hash_to_bytes",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        }
                    ],
                    "return": "Object"
                }
            ]
        },
        {
            "name": "key",
            "export": "k",
            "functions": [
                {
                    "export": "_",
                    "name": "public_key_from_bytes",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        }
                    ],
                    "return": "Object"
                },
                {
                    "export": "0",
                    "name": "public_key_to_bytes",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        }
                    ],
                    "return": "Object"
                }
            ]
        },
        {
            "name": "crypto",
            "export": "c",
            "functions": [
                {
                    "export": "_",
                    "name": "compute_hash_sha256",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        }
                    ],
                    "return": "Object"
                },
                {
                    "export": "0",
                    "name": "verify_sig_ed25519",
                    "args": [
                        {
                            "name": "x",
                            "type": "Object"
                        },
                        {
                            "name": "k",
                            "type": "Object"
                        },
                        {
                            "name": "s",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal"
                }
            ]
        },
        {
            "name": "account",
            "export": "a",
            "functions": [
                {
                    "export": "_",
                    "name": "account_get_low_threshold",
                    "args": [
                        {
                            "name": "a",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the low threshold for the account with ID `a` (`a` is `AccountId`). Traps if no such account exists."
                },
                {
                    "export": "0",
                    "name": "account_get_medium_threshold",
                    "args": [
                        {
                            "name": "a",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the medium threshold for the account with ID `a` (`a` is `AccountId`). Traps if no such account exists."
                },
                {
                    "export": "1",
                    "name": "account_get_high_threshold",
                    "args": [
                        {
                            "name": "a",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the high threshold for the account with ID `a` (`a` is `AccountId`). Traps if no such account exists."
                },
                {
                    "export": "2",
                    "name": "account_get_signer_weight",
                    "args": [
                        {
                            "name": "a",
                            "type": "Object"
                        },
                        {
                            "name": "s",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Get the signer weight for the signer with ed25519 public key `s` (`s` is `Bytes`) on the account with ID `a` (`a` is `AccountId`). Returns the master weight if the signer is the master, and returns 0 if no such signer exists. Traps if no such account exists."
                },
                {
                    "export": "3",
                    "name": "account_exists",
                    "args": [
                        {
                            "name": "a",
                            "type": "Object"
                        }
                    ],
                    "return": "RawVal",
                    "docs": "Given an ID `a` (`a` is `AccountId`) of an account, check if it exists. Returns (SCStatic) TRUE/FALSE."
                }
            ]
        },
        {
            "name": "test",
            "export": "t",
            "functions": [
                {
                    "export": "_",
                    "name": "dummy0",
                    "args": [],
                    "return": "RawVal",
                    "docs": "A dummy function taking 0 arguments and performs no-op. This function is for test purpose only, for measuring the roundtrip cost of invoking a host function, i.e. host->Vm->host."
                }
            ]
        }
    ]
}
